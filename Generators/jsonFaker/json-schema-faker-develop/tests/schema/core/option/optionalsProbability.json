[
  {
    "description": "optionalsProbability option",
    "schemas": [
      {
        "type": "object",
        "properties": {
          "optionalProperty1": { "type": "number", "default": 1 },
          "optionalProperty2": { "type": "number", "default": 1 },
          "optionalProperty3": { "type": "number", "default": 1 },
          "optionalProperty4": { "type": "number", "default": 1 },
          "optionalProperty5": { "type": "number", "default": 1 }
        }
      }
    ],
    "tests": [
      {
        "description": "should handle optionalsProbability option (default = false) for objects",
        "schema": "schemas.0",
        "valid": true
      },
      {
        "description": "should handle optionalsProbability option (= 0) for objects",
        "schema": "schemas.0",
        "valid": true,
        "equal": {},
        "set": {
          "useDefaultValue": true,
          "optionalsProbability": 0.0
        }
      },
      {
        "description": "should handle optionalsProbability option (= 1) for objects",
        "schema": "schemas.0",
        "valid": true,
        "equal": {
          "optionalProperty1": 1,
          "optionalProperty2": 1,
          "optionalProperty3": 1,
          "optionalProperty4": 1,
          "optionalProperty5": 1
        },
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "optionalsProbability": 1.0
        }
      },
      {
        "description": "should handle optionalsProbability option (= 1) for arrays",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["a"]
          },
          "maxItems": 5,
          "minItems": 0
        },
        "valid": true,
        "equal": ["a", "a", "a", "a", "a"],
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "optionalsProbability": 1.0
        }
      },
      {
        "description": "should handle optionalsProbability option (= 0) overwritten by alwaysFakeOptionals for objects",
        "schema": "schemas.0",
        "valid": true,
        "equal": {
          "optionalProperty1": 1,
          "optionalProperty2": 1,
          "optionalProperty3": 1,
          "optionalProperty4": 1,
          "optionalProperty5": 1
        },
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "alwaysFakeOptionals": true,
          "optionalsProbability": 0.0
        }
      },
      {
        "description": "should handle optionalsProbability option (= 0) overwritten by alwaysFakeOptionals for objects",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["a"]
          },
          "maxItems": 5,
          "minItems": 0
        },
        "valid": true,
        "equal": ["a", "a", "a", "a", "a"],
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "alwaysFakeOptionals": true,
          "optionalsProbability": 0.0
        }
      },
      {
        "description": "should generate just zero properties if optionalsProbability is 0%",
        "schema": "schemas.0",
        "valid": true,
        "count": 0,
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "optionalsProbability": 0.0
        }
      },
      {
        "description": "should generate just one property if optionalsProbability is 20%",
        "schema": "schemas.0",
        "valid": true,
        "count": 1,
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "optionalsProbability": 0.2
        }
      },
      {
        "description": "should generate just two properties if optionalsProbability is 40%",
        "schema": "schemas.0",
        "valid": true,
        "count": 2,
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "optionalsProbability": 0.4
        }
      },
      {
        "description": "should generate just three properties if optionalsProbability is 60%",
        "schema": "schemas.0",
        "valid": true,
        "count": 3,
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "optionalsProbability": 0.6
        }
      },
      {
        "description": "should generate just four properties if optionalsProbability is 80%",
        "schema": "schemas.0",
        "valid": true,
        "count": 4,
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "optionalsProbability": 0.8
        }
      },
      {
        "description": "should generate all properties if optionalsProbability is 100%",
        "schema": "schemas.0",
        "valid": true,
        "count": 5,
        "set": {
          "useDefaultValue": true,
          "fixedProbabilities": true,
          "optionalsProbability": 1.0
        }
      }
    ]
  }
]
